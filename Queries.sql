############################################
#		VARIABLE DECLARATION
############################################
SET @DATEDIFF_TH = 100; #50
SET @SURVIVE_CUTOFF = '2018-01-01';
SET @PAID_DOWN_ADJ = 30; #PAID DOWN BY INSPECTION, FILL IN PAID_DATE2 = `LAST_SEEN` + C
SET @NCEDATE_ADJ = 15;
SET @CLSG_THRESHOLD = 200;
SET @REFI_RESET_DATE_BARRIER = 20;
SET @NAV_DAYDIFF1 = 28;
SET @NAV_DAYDIFF2 = 364;
SET @AAA_DAYDIFF1 = 91;

############################################
#		Useful queries 
############################################
# GENERATE LIST OF TRANCHES OF INTEREST
CREATE TEMPORARY TABLE IF NOT EXISTS UNIQUE_TRANCHES_TABLE AS (SELECT T1.CDONETNAME,T1.LABEL FROM
(SELECT DISTINCT `CDONETNAME`,`LABEL` FROM TRANCHES 
WHERE `SUBORDPRIORITY` > 0 AND `SUBORD` <> 'EQUITY' AND `ISCOMBINATION` = 0 
AND `LABEL` NOT LIKE '%X%' AND `LABEL` NOT LIKE '%SFN%' AND `CDONETNAME` NOT LIKE '%-RF%' AND `CPNRATE` > 0) AS T1
LEFT JOIN
CLOS 
ON T1.CDONETNAME = CLOS.CDONETNAME
WHERE CLOS.REGION = 'US' AND CLSGDATE > '2012-01-01');

# DELETE DEALS WITH LESS THAN 12 REPORTS
CREATE TEMPORARY TABLE IF NOT EXISTS SHORT_DEALS AS
(SELECT `CDONETNAME` FROM (SELECT DISTINCT `CDONETNAME`,`REPORTDATE` FROM TRANCHES GROUP BY `CDONETNAME`,`REPORTDATE`) AS T GROUP BY `CDONETNAME` HAVING COUNT(*) < 12);
DELETE FROM UNIQUE_TRANCHES_TABLE WHERE `CDONETNAME` IN (SELECT * FROM SHORT_DEALS);

# DELETE PROBLEMATIC DEALS, SEE "Data Remarks.docx"
DELETE FROM UNIQUE_TRANCHES_TABLE WHERE `CDONETNAME` LIKE 'JFIN%' OR `CDONETNAME` LIKE 'BNPP%';

# DELETE PROBLEMATIC DEALS, SEE "Data Remarks.docx"
DELETE FROM UNIQUE_TRANCHES_TABLE WHERE `CDONETNAME` IN ('MADPK19','WLFLT151','ACIS13-2','WEST12-1','JTOWN_4','NEUBERGE','MIDOCN1');

# CREATE LIST OF LAST SEEN GROUP BY TRANCHES
CREATE TEMPORARY TABLE IF NOT EXISTS LAST_SEEN_TABLE AS 
(SELECT CDONETNAME, LABEL, MAX(`REPORTDATE`) AS `LAST_SEEN` FROM TRANCHES WHERE CURRFACE > 0 GROUP BY CDONETNAME,LABEL);

# COMBINE WITH LAST SEEN WITH TRANCHE OF INTEREST
CREATE TEMPORARY TABLE IF NOT EXISTS TRANCE_WITH_LASTSEEN AS
(SELECT UNIQUE_TRANCHES_TABLE.CDONETNAME,UNIQUE_TRANCHES_TABLE.LABEL,LAST_SEEN_TABLE.LAST_SEEN FROM
UNIQUE_TRANCHES_TABLE LEFT JOIN LAST_SEEN_TABLE
ON UNIQUE_TRANCHES_TABLE.CDONETNAME = LAST_SEEN_TABLE.CDONETNAME AND UNIQUE_TRANCHES_TABLE.LABEL = LAST_SEEN_TABLE.LABEL);

# CLEAN UP MASTER TABLE WITH LAST SEEN ERRORS
UPDATE TRANCE_WITH_LASTSEEN SET `LAST_SEEN` = CURDATE() WHERE `LAST_SEEN` > curdate() ;

# CREATE LIST WITH NON-CALL-END 
CREATE TEMPORARY TABLE IF NOT EXISTS TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE AS
SELECT W_NCEDATE.*,W_CLSGDATE.CLSGDATE FROM
(SELECT TRANCE_WITH_LASTSEEN.* ,MONTHLY_DEAL_DATA.NCEDATE FROM
TRANCE_WITH_LASTSEEN LEFT JOIN MONTHLY_DEAL_DATA
ON TRANCE_WITH_LASTSEEN.CDONETNAME = MONTHLY_DEAL_DATA.CDONETNAME
AND TRANCE_WITH_LASTSEEN.LAST_SEEN = MONTHLY_DEAL_DATA.REPORTDATE
) AS W_NCEDATE
LEFT JOIN (SELECT `CDONETNAME`,`CLSGDATE` FROM CLOS) AS W_CLSGDATE
ON W_NCEDATE.CDONETNAME = W_CLSGDATE.CDONETNAME;

# CLEAN LIST WHERE NCEDATE IS NULL
CREATE TEMPORARY TABLE IF NOT EXISTS TRANCHE_WITH_NO_NCED AS
(SELECT DISTINCT `CDONETNAME` FROM TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE WHERE `NCEDATE` IS NULL);
DELETE FROM TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE WHERE CDONETNAME IN (SELECT * FROM TRANCHE_WITH_NO_NCED);

# CLEAN LIST WHERE LAST SEEN YEAR = CLOSING YEAR
DELETE FROM TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE WHERE DATEDIFF(LAST_SEEN,CLSGDATE) < @CLSG_THRESHOLD;

# CREATE LIST WITH COUNT OF DISTINCT LAST SEEN
CREATE TEMPORARY TABLE IF NOT EXISTS LAST_SEEN_COUNT AS
(SELECT CDONETNAME,COUNT(DISTINCT(LAST_SEEN)) as `LastSeenCount` FROM TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE
GROUP BY CDONETNAME);

# CREATE LIST WITH LAST REPORT DATE AVAILABLE IN DEAL LIBRARY
CREATE TEMPORARY TABLE IF NOT EXISTS DEAL_LAST_REPORT AS 
(SELECT CDONETNAME,MAX(`REPORTDATE`) AS LAST_REPORT FROM MONTHLY_DEAL_DATA GROUP BY CDONETNAME);

# COMBINE LAST REPORT DATE WITH MASTER LIST 
CREATE TEMPORARY TABLE IF NOT EXISTS TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT AS 
(SELECT TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE.*,  DEAL_LAST_REPORT.LAST_REPORT FROM 
TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE LEFT JOIN DEAL_LAST_REPORT
ON TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE.CDONETNAME = DEAL_LAST_REPORT.CDONETNAME
);

# CREATE PAID DATE TABLE
CREATE TEMPORARY TABLE IF NOT EXISTS TRANCHE_WITH_PAID_DATE AS 
#SELECT `CDONETNAME`,`LABEL`,DATE(from_unixtime(SUM(unix_timestamp(`PAYMENTDATE`)*`PAIDPRINC`)/SUM(`PAIDPRINC`))) AS `PAID_DATE` , MAX(`BEGINNINGBAL`)
SELECT `CDONETNAME`,`LABEL`,DATE(from_unixtime(MAX(unix_timestamp(`PAYMENTDATE`)*(`PAIDPRINC`>0)))) AS `PAID_DATE` , MAX(`BEGINNINGBAL`)
FROM ALLPAYMENTS GROUP BY `CDONETNAME`, `LABEL` HAVING ABS(SUM(`PAIDPRINC`) - MAX(`BEGINNINGBAL`)) < 100;

# COMBINE PAID DATE WITH MASTER LIST 
CREATE TEMPORARY TABLE IF NOT EXISTS TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDdATE AS 
(SELECT TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT.*,  TRANCHE_WITH_PAID_DATE.PAID_DATE FROM 
TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT LEFT JOIN TRANCHE_WITH_PAID_DATE
ON TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT.CDONETNAME = TRANCHE_WITH_PAID_DATE.CDONETNAME AND
TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT.LABEL = TRANCHE_WITH_PAID_DATE.LABEL
);

# CLEANING LAST SEEN TO DISTINGUISH REFI/RESET/CALL
CREATE TEMPORARY TABLE IF NOT EXISTS TRANCHE_WITH_LASTSEEN_MAX_1_LAST_SEEN AS 
(SELECT TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDDATE.CDONETNAME,  MAX(`LAST_SEEN`) AS MAX_1_LAST_SEEN FROM
TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDDATE GROUP BY `CDONETNAME`
);

# CLEANING LAST SEEN TO DISTINGUISH REFI/RESET/CALL (CONT'D)
CREATE TEMPORARY TABLE IF NOT EXISTS TRANCHE_WITH_LASTSEEN_MAX_2_LAST_SEEN AS 
(SELECT CDONETNAME,MAX(`LAST_SEEN`) AS `MAX_2_LAST_SEEN` FROM (SELECT TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDDATE.CDONETNAME,  TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDDATE.LAST_SEEN, TRANCHE_WITH_LASTSEEN_MAX_1_LAST_SEEN.MAX_1_LAST_SEEN FROM
TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDDATE LEFT JOIN TRANCHE_WITH_LASTSEEN_MAX_1_LAST_SEEN
ON TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDDATE.CDONETNAME = TRANCHE_WITH_LASTSEEN_MAX_1_LAST_SEEN.CDONETNAME) AS t1
WHERE LAST_SEEN < MAX_1_LAST_SEEN GROUP BY `CDONETNAME`
);

# CLEANING LAST SEEN TO DISTINGUISH REFI/RESET/CALL (CONT'D)
CREATE TEMPORARY TABLE IF NOT EXISTS TRANCHE_WITH_LASTSEEN_MAX_3_LAST_SEEN AS 
(SELECT CDONETNAME,MAX(`LAST_SEEN`) AS `MAX_3_LAST_SEEN` FROM (SELECT TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDDATE.CDONETNAME,  TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDDATE.LAST_SEEN, TRANCHE_WITH_LASTSEEN_MAX_2_LAST_SEEN.MAX_2_LAST_SEEN FROM
TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDDATE LEFT JOIN TRANCHE_WITH_LASTSEEN_MAX_2_LAST_SEEN
ON TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDDATE.CDONETNAME = TRANCHE_WITH_LASTSEEN_MAX_2_LAST_SEEN.CDONETNAME) AS t1
WHERE LAST_SEEN < MAX_2_LAST_SEEN GROUP BY `CDONETNAME`
);

# CLEANING LAST SEEN TO DISTINGUISH REFI/RESET/CALL (CONT'D)
CREATE TEMPORARY TABLE IF NOT EXISTS TRANCHE_WITH_LASTSEEN_MAX_4_LAST_SEEN AS 
(SELECT CDONETNAME,MAX(`LAST_SEEN`) AS `MAX_4_LAST_SEEN` FROM (SELECT TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDDATE.CDONETNAME,  TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDDATE.LAST_SEEN, TRANCHE_WITH_LASTSEEN_MAX_3_LAST_SEEN.MAX_3_LAST_SEEN FROM
TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDDATE LEFT JOIN TRANCHE_WITH_LASTSEEN_MAX_3_LAST_SEEN
ON TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDDATE.CDONETNAME = TRANCHE_WITH_LASTSEEN_MAX_3_LAST_SEEN.CDONETNAME) AS t1
WHERE LAST_SEEN < MAX_3_LAST_SEEN GROUP BY `CDONETNAME`
);

# CLEANING LAST SEEN TO DISTINGUISH REFI/RESET/CALL (CONT'D)
CREATE TEMPORARY TABLE IF NOT EXISTS TRANCHE_WITH_LASTSEEN_COUNT_SHOW AS
(SELECT T3.*, `MAX_4_LAST_SEEN` FROM
(SELECT T2.*, `MAX_3_LAST_SEEN` FROM
(SELECT T1.* , `MAX_2_LAST_SEEN` FROM
(SELECT LAST_SEEN_COUNT.* , `MAX_1_LAST_SEEN` FROM 
LAST_SEEN_COUNT LEFT JOIN TRANCHE_WITH_LASTSEEN_MAX_1_LAST_SEEN
ON LAST_SEEN_COUNT.CDONETNAME = TRANCHE_WITH_LASTSEEN_MAX_1_LAST_SEEN.CDONETNAME) AS T1
LEFT JOIN TRANCHE_WITH_LASTSEEN_MAX_2_LAST_SEEN
ON T1.CDONETNAME = TRANCHE_WITH_LASTSEEN_MAX_2_LAST_SEEN.CDONETNAME) AS T2
LEFT JOIN TRANCHE_WITH_LASTSEEN_MAX_3_LAST_SEEN
ON T2.CDONETNAME = TRANCHE_WITH_LASTSEEN_MAX_3_LAST_SEEN.CDONETNAME) AS T3
LEFT JOIN TRANCHE_WITH_LASTSEEN_MAX_4_LAST_SEEN
ON T3.CDONETNAME = TRANCHE_WITH_LASTSEEN_MAX_4_LAST_SEEN.CDONETNAME);

# CREATE DEATH TIME TABLE TO MAKE SURE MAX_1_LAST_SEEN MAKE SENSE
CREATE TEMPORARY TABLE IF NOT EXISTS DEAL_WITH_DEATH_TIME AS
(SELECT `CDONETNAME`,min(`REPORTDATE`) AS `DEATH_TIME` FROM
(SELECT `CDONETNAME`,`REPORTDATE` FROM TRANCHES 
WHERE SUBORD = 'MEZZANINE' AND ISNULLIFIED = 0 AND ISCOMBINATION = 0
GROUP BY `CDONETNAME`, `REPORTDATE` HAVING SUM(CURRFACE) = 0) AS T1
GROUP BY `CDONETNAME`);

# COMBINE DEATH TIME WITH LAST SEEN TABLE
CREATE TEMPORARY TABLE IF NOT EXISTS TRANCHE_WITH_LASTSEEN_COUNT_SHOW_DEALTH AS
(SELECT TRANCHE_WITH_LASTSEEN_COUNT_SHOW.*, DEAL_WITH_DEATH_TIME.DEATH_TIME FROM
TRANCHE_WITH_LASTSEEN_COUNT_SHOW LEFT JOIN DEAL_WITH_DEATH_TIME
ON TRANCHE_WITH_LASTSEEN_COUNT_SHOW.CDONETNAME = DEAL_WITH_DEATH_TIME.CDONETNAME);

# DECIDE WHETHER LAST SEEN SHOULD BE REPLACE BY PREVIOUS LAST SEEN
CREATE TEMPORARY TABLE IF NOT EXISTS TRANCHE_WITH_LASTSEEN_SHOW_COMPARE AS
(SELECT TRANCHE_WITH_LASTSEEN_COUNT_SHOW_DEALTH.* ,
`DEATH_TIME` IS NULL AS `MEZZ_NOT_PAID`,
DATEDIFF(`MAX_3_LAST_SEEN`,`MAX_4_LAST_SEEN`)<@DATEDIFF_TH AS `CHANGE_3_TO_4`,
DATEDIFF(`MAX_2_LAST_SEEN`,`MAX_3_LAST_SEEN`)<@DATEDIFF_TH AS `CHANGE_2_TO_3`,
DATEDIFF(`MAX_1_LAST_SEEN`,`MAX_2_LAST_SEEN`)<@DATEDIFF_TH AS `CHANGE_1_TO_2` FROM 
TRANCHE_WITH_LASTSEEN_COUNT_SHOW_DEALTH
);

# CREATE LIST OF AMBIGOUS DEALS - DEAL DOES NOT HAVE A REPORT FOR A LONG TIME BUT INDICATES SURVIVE
CREATE TEMPORARY TABLE IF NOT EXISTS AMBIGOUS_DEAL AS
SELECT `CDONETNAME` FROM TRANCHE_WITH_LASTSEEN_SHOW_COMPARE WHERE `MAX_1_LAST_SEEN` < @SURVIVE_CUTOFF AND `MEZZ_NOT_PAID` = 1;

# REMOVE AMBIGOUS DEALS
DELETE FROM TRANCHE_WITH_LASTSEEN_SHOW_COMPARE WHERE `CDONETNAME` IN (SELECT * FROM AMBIGOUS_DEAL);

# ADD IN NEW MAX COLUMNS
ALTER TABLE TRANCHE_WITH_LASTSEEN_SHOW_COMPARE ADD `NEW_MAX_4` DATE;
UPDATE TRANCHE_WITH_LASTSEEN_SHOW_COMPARE SET `NEW_MAX_4` = `MAX_4_LAST_SEEN` ;
ALTER TABLE TRANCHE_WITH_LASTSEEN_SHOW_COMPARE ADD `NEW_MAX_3` DATE;
UPDATE TRANCHE_WITH_LASTSEEN_SHOW_COMPARE SET `NEW_MAX_3` = IF(`CHANGE_3_TO_4`=1,`NEW_MAX_4`,`MAX_3_LAST_SEEN`) ;
ALTER TABLE TRANCHE_WITH_LASTSEEN_SHOW_COMPARE ADD `NEW_MAX_2` DATE;
UPDATE TRANCHE_WITH_LASTSEEN_SHOW_COMPARE SET `NEW_MAX_2` = IF(`CHANGE_2_TO_3`=1,`NEW_MAX_3`,`MAX_2_LAST_SEEN`) ;
ALTER TABLE TRANCHE_WITH_LASTSEEN_SHOW_COMPARE ADD `NEW_MAX_1` DATE;
UPDATE TRANCHE_WITH_LASTSEEN_SHOW_COMPARE SET `NEW_MAX_1` = IF(`CHANGE_1_TO_2` = 1 AND `MEZZ_NOT_PAID`=0,`NEW_MAX_2`,`MAX_1_LAST_SEEN`) ;

# PREPARE MODIFIED LAST SEEN TO MERGE
CREATE TEMPORARY TABLE IF NOT EXISTS NM AS
SELECT `CDONETNAME`,`MAX_1_LAST_SEEN` AS LAST_SEEN_OLD,`NEW_MAX_1` AS LAST_SEEN_NEW,`MEZZ_NOT_PAID` FROM TRANCHE_WITH_LASTSEEN_SHOW_COMPARE WHERE `NEW_MAX_1` IS NOT NULL;
CREATE TEMPORARY TABLE IF NOT EXISTS NM2 AS
SELECT `CDONETNAME`,`MAX_2_LAST_SEEN` AS LAST_SEEN_OLD,`NEW_MAX_2` AS LAST_SEEN_NEW,`MEZZ_NOT_PAID` FROM TRANCHE_WITH_LASTSEEN_SHOW_COMPARE WHERE `NEW_MAX_2` IS NOT NULL;
CREATE TEMPORARY TABLE IF NOT EXISTS NM3 AS
SELECT `CDONETNAME`,`MAX_3_LAST_SEEN` AS LAST_SEEN_OLD,`NEW_MAX_3` AS LAST_SEEN_NEW,`MEZZ_NOT_PAID` FROM TRANCHE_WITH_LASTSEEN_SHOW_COMPARE WHERE `NEW_MAX_3` IS NOT NULL;
CREATE TEMPORARY TABLE IF NOT EXISTS NM4 AS
SELECT `CDONETNAME`,`MAX_4_LAST_SEEN` AS LAST_SEEN_OLD,`NEW_MAX_4` AS LAST_SEEN_NEW,`MEZZ_NOT_PAID` FROM TRANCHE_WITH_LASTSEEN_SHOW_COMPARE WHERE `NEW_MAX_4` IS NOT NULL;
INSERT into NM SELECT * FROM NM2;
INSERT into NM SELECT * FROM NM3;
INSERT into NM SELECT * FROM NM4;

# REMOVE AMBIGUOS DEALS FROM MASTER TABLE
DELETE FROM TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDdATE WHERE `CDONETNAME` IN (SELECT * FROM AMBIGOUS_DEAL) AND `PAID_DATE` IS NULL;

# COMBINE MODIFIED LAST SEEN TO MASTER TABLE
CREATE TEMPORARY TABLE IF NOT EXISTS TRANCHE_WITH_LASTSEEN_NCED_LASTREPORT_PAIDdATE_NewLastSeen AS
(SELECT TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDdATE.*,NM.LAST_SEEN_NEW AS `LAST_SEEN_2`,NM.`MEZZ_NOT_PAID` FROM 
TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDdATE LEFT JOIN NM
ON TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDdATE.CDONETNAME = NM.CDONETNAME AND
TRANCHE_WITH_LASTSEEN_NCED_CLSGDATE_LASTREPORT_PAIDdATE.LAST_SEEN = NM.LAST_SEEN_OLD);

# FILL IN MISSING PAID_DATE BY (CDONETNAME,LAST_SEEN) PAIR
CREATE TEMPORARY TABLE IF NOT EXISTS `PAID_DATE_BY_LAST_SEEN` AS
(SELECT `CDONETNAME`,`LAST_SEEN`,MAX(`PAID_DATE`) as `PAID_DATE` FROM TRANCHE_WITH_LASTSEEN_NCED_LASTREPORT_PAIDdATE_NewLastSeen
WHERE `PAID_DATE` IS NOT NULL GROUP BY `CDONETNAME`,`LAST_SEEN`);

CREATE TEMPORARY TABLE IF NOT EXISTS TRANCHE_WITH_NewLastSeen_NewPaidDate AS
SELECT TRANCHE_WITH_LASTSEEN_NCED_LASTREPORT_PAIDdATE_NewLastSeen.*,PAID_DATE_BY_LAST_SEEN.PAID_DATE AS `JUDGE_DATE`
FROM TRANCHE_WITH_LASTSEEN_NCED_LASTREPORT_PAIDdATE_NewLastSeen
LEFT JOIN PAID_DATE_BY_LAST_SEEN
ON TRANCHE_WITH_LASTSEEN_NCED_LASTREPORT_PAIDdATE_NewLastSeen.CDONETNAME = PAID_DATE_BY_LAST_SEEN.CDONETNAME
AND TRANCHE_WITH_LASTSEEN_NCED_LASTREPORT_PAIDdATE_NewLastSeen.LAST_SEEN = PAID_DATE_BY_LAST_SEEN.LAST_SEEN;

UPDATE TRANCHE_WITH_NewLastSeen_NewPaidDate SET `LAST_SEEN_2` = `JUDGE_DATE` WHERE `LAST_SEEN_2` IS NULL;

# LOOK AT DEALS THAT ONLY HAS ONE TRANCHE PER CALL DATE AND DOES NOT HAVE REF- TRANCHE
CREATE TEMPORARY TABLE IF NOT EXISTS TRANCHE_BY_ITSELF AS
SELECT T1.*,SUM(T2.R_CNT) FROM
(SELECT CDONETNAME,LABEL FROM TRANCHE_WITH_NewLastSeen_NewPaidDate GROUP BY CDONETNAME,LAST_SEEN_2 HAVING COUNT(*) = 1) AS T1
LEFT JOIN
(SELECT CDONETNAME,LABEL,COUNT(*) AS R_CNT FROM TRANCHES GROUP BY CDONETNAME,LABEL) AS T2
ON T1.CDONETNAME = T2.CDONETNAME AND T2.LABEL LIKE CONCAT(T1.LABEL,'%','R')
WHERE T1.LABEL NOT LIKE '%R'
GROUP BY CDONETNAME,LABEL
HAVING SUM(T2.R_CNT) IS NULL;

CREATE TEMPORARY TABLE IF NOT EXISTS TRANCHE_BY_ITSELF_EXEMPT AS
SELECT TRANCHE_BY_ITSELF.*,T.`SUBPRIOR` FROM 
TRANCHE_BY_ITSELF 
INNER JOIN 
(SELECT CDONETNAME,LABEL,MAX(`SUBORDPRIORITY`) AS `SUBPRIOR` FROM TRANCHES GROUP BY CDONETNAME,LABEL) AS T
ON TRANCHE_BY_ITSELF.CDONETNAME = T.CDONETNAME AND TRANCHE_BY_ITSELF.LABEL = T.LABEL
WHERE TRANCHE_BY_ITSELF.`LABEL` NOT LIKE '%2%' AND TRANCHE_BY_ITSELF.`LABEL` NOT LIKE '%B%' AND `SUBPRIOR` = 1;

# DELETE TRANCHES THAT ARE BY ITS OWN AND NO REFI
DELETE FROM TRANCHE_WITH_NewLastSeen_NewPaidDate WHERE 
CONCAT(TRANCHE_WITH_NewLastSeen_NewPaidDate.`CDONETNAME`,TRANCHE_WITH_NewLastSeen_NewPaidDate.`LABEL`)
IN
(SELECT CONCAT(`CDONETNAME`,`LABEL`) FROM (
SELECT TRANCHE_BY_ITSELF.* FROM TRANCHE_BY_ITSELF 
LEFT JOIN 
TRANCHE_BY_ITSELF_EXEMPT 
	ON TRANCHE_BY_ITSELF.CDONETNAME = TRANCHE_BY_ITSELF_EXEMPT.CDONETNAME
    AND TRANCHE_BY_ITSELF.LABEL = TRANCHE_BY_ITSELF_EXEMPT.LABEL
WHERE TRANCHE_BY_ITSELF_EXEMPT.LABEL IS NULL
) T);

# ADD AND UPDATE CALLED COLUMNS
ALTER TABLE TRANCHE_WITH_NewLastSeen_NewPaidDate ADD `CALLED` INT(1);
UPDATE TRANCHE_WITH_NewLastSeen_NewPaidDate SET `CALLED` = 1 WHERE `JUDGE_DATE` IS NOT NULL;

# FOR DEALS THAT HAS BEEN PAID DOWN BY INSPECTION, FILL IN PAID_DATE2 = `LAST_SEEN` + C
UPDATE TRANCHE_WITH_NewLastSeen_NewPaidDate SET `JUDGE_DATE` = DATE_ADD(`LAST_SEEN`,interval @PAID_DOWN_ADJ DAY), `CALLED` = 1 WHERE `MEZZ_NOT_PAID` = 0 AND `JUDGE_DATE` IS NULL;

# DELETE THOSE HAVE NOT BEEN SEEN FOR A LONG TIME BUT INDICATE NOT PAID DOWN
CREATE TEMPORARY TABLE IF NOT EXISTS DEAL_LONG_TIME_NO_SEE AS
(SELECT DISTINCT `CDONETNAME` FROM TRANCHE_WITH_NewLastSeen_NewPaidDate 
WHERE `MEZZ_NOT_PAID` = 1 AND `LAST_SEEN_2` <  @SURVIVE_CUTOFF AND `JUDGE_DATE` IS NULL);
DELETE FROM TRANCHE_WITH_NewLastSeen_NewPaidDate WHERE `CDONETNAME` IN (SELECT * FROM DEAL_LONG_TIME_NO_SEE);

# FILL IN PAID_DATE2 FOR ALIVE DEALS BUT OLD TRANCHES
UPDATE TRANCHE_WITH_NewLastSeen_NewPaidDate SET `JUDGE_DATE` = `LAST_SEEN` , `CALLED` = 0 WHERE `MEZZ_NOT_PAID` = 1 AND `JUDGE_DATE` IS NULL;

# CREATE START DATE MASTER TABLE
CREATE TEMPORARY TABLE IF NOT EXISTS START_DATE_MASTER AS
(SELECT distinct `CDONETNAME`,`LAST_SEEN_2` FROM TRANCHE_WITH_NewLastSeen_NewPaidDate);

# CREATE NEW LAST SEEN COUNT
CREATE TEMPORARY TABLE IF NOT EXISTS NEW_LAST_SEEN_COUNT AS
SELECT `CDONETNAME`,COUNT(*) AS CNT FROM (SELECT distinct `CDONETNAME`,`LAST_SEEN_2` FROM TRANCHE_WITH_NewLastSeen_NewPaidDate) AS T group by `CDONETNAME` ;

# COMBINE LAST SEEN COUNT, RANK WITH MASTER
CREATE TEMPORARY TABLE IF NOT EXISTS START_DATE_MASTER_LSCNT_RK AS
SELECT WITH_RANK.*,NEW_LAST_SEEN_COUNT.CNT FROM
(SELECT `CDONETNAME`,`LAST_SEEN_2`,`LAST_SEEN_RANK` FROM
(SELECT *,
@STUDENT:=CASE WHEN @CLASS <> `CDONETNAME` THEN CONCAT(LEFT(@CLASS:= `CDONETNAME`,0),1) ELSE CONCAT(LEFT(@CLASS:= `CDONETNAME`,0),@STUDENT+1) END AS `LAST_SEEN_RANK`
FROM
(SELECT @STUDENT:=-1) AS S,
(SELECT @CLASS:= -1) AS C,
(SELECT * FROM START_DATE_MASTER ORDER BY `CDONETNAME`,`LAST_SEEN_2`) AS T) AS T1) AS WITH_RANK
LEFT JOIN NEW_LAST_SEEN_COUNT ON
WITH_RANK.CDONETNAME = NEW_LAST_SEEN_COUNT.CDONETNAME;

ALTER TABLE START_DATE_MASTER_LSCNT_RK ADD `JUDGE_DATE` DATE;
UPDATE START_DATE_MASTER_LSCNT_RK LEFT JOIN TRANCHE_WITH_NewLastSeen_NewPaidDate
ON START_DATE_MASTER_LSCNT_RK.`CDONETNAME` = TRANCHE_WITH_NewLastSeen_NewPaidDate.`CDONETNAME`
AND START_DATE_MASTER_LSCNT_RK.`LAST_SEEN_2` = TRANCHE_WITH_NewLastSeen_NewPaidDate.`LAST_SEEN_2`
SET START_DATE_MASTER_LSCNT_RK.`JUDGE_DATE` = TRANCHE_WITH_NewLastSeen_NewPaidDate.`JUDGE_DATE`;

# CREATE NCEDATE LIST
CREATE TEMPORARY TABLE IF NOT EXISTS NCEDATE_BY_CDONETNAME AS
SELECT DISTINCT monthly_deal_data.`CDONETNAME`,monthly_deal_data.`NCEDATE` FROM monthly_deal_data LEFT JOIN CLOS ON monthly_deal_data.CDONETNAME = CLOS.CDONETNAME
WHERE DATEDIFF(monthly_deal_data.`REPORTDATE`,CLOS.`CLSGDATE`) > @CLSG_THRESHOLD AND monthly_deal_data.`NCEDATE` IS NOT NULL;

# CREATE NCEDATE COUNT
CREATE TEMPORARY TABLE IF NOT EXISTS NCEDATE_CNT AS
(SELECT `CDONETNAME`,COUNT(*) AS CNT FROM NCEDATE_BY_CDONETNAME GROUP BY `CDONETNAME`);

# CREATE NCEDATE LIST WITH COUNT
CREATE TEMPORARY TABLE IF NOT EXISTS NCEDATE_BY_CDONETNAME_CNT AS
SELECT NCEDATE_BY_CDONETNAME.*,NCEDATE_CNT.CNT AS `NCED_CNT` FROM NCEDATE_BY_CDONETNAME LEFT JOIN NCEDATE_CNT
ON NCEDATE_BY_CDONETNAME.CDONETNAME = NCEDATE_CNT.CDONETNAME;

# CREATE NCEDATE LIST WITH COUNT AND RANK
CREATE TEMPORARY TABLE IF NOT EXISTS NCEDATE_BY_CDONETNAME_CNT_RK AS
SELECT `CDONETNAME`,`NCEDATE`,`NCED_CNT`,`NCED_RANK` FROM
(SELECT *,
@STUDENT:=CASE WHEN @CLASS <> `CDONETNAME` THEN CONCAT(LEFT(@CLASS:= `CDONETNAME`,0),1) ELSE CONCAT(LEFT(@CLASS:= `CDONETNAME`,0),@STUDENT+1) END AS `NCED_RANK`
FROM
(SELECT @STUDENT:=-1) AS S,
(SELECT @CLASS:= -1) AS C,
(SELECT * FROM NCEDATE_BY_CDONETNAME_CNT ORDER BY `CDONETNAME`,`NCEDATE`) AS T) AS T1;

ALTER TABLE START_DATE_MASTER_LSCNT_RK ADD `STARTDATE` DATE;
ALTER TABLE START_DATE_MASTER_LSCNT_RK ADD `REMARK` VARCHAR(45);
ALTER TABLE START_DATE_MASTER_LSCNT_RK ADD `REMARK2` VARCHAR(45);

# UPDATE START DATE - COUNT = 1
UPDATE START_DATE_MASTER_LSCNT_RK
LEFT JOIN NCEDATE_BY_CDONETNAME_CNT_RK 
ON START_DATE_MASTER_LSCNT_RK.CDONETNAME = NCEDATE_BY_CDONETNAME_CNT_RK.CDONETNAME
SET START_DATE_MASTER_LSCNT_RK.`STARTDATE` = DATE_ADD(NCEDATE_BY_CDONETNAME_CNT_RK.`NCEDATE`,INTERVAL -@NCEDATE_ADJ DAY)
WHERE START_DATE_MASTER_LSCNT_RK.CNT = 1;

# CHECK COUNT = 2, RESET OR REFI
DROP PROCEDURE IF EXISTS LOOP2_REFI_RST;
DELIMITER ;;
CREATE PROCEDURE LOOP2_REFI_RST()
BEGIN
DECLARE n INT DEFAULT 0;
DECLARE i INT DEFAULT 0;
SELECT COUNT(DISTINCT `CDONETNAME`) FROM START_DATE_MASTER_LSCNT_RK WHERE CNT = 2 INTO n;
SET i = 0;
WHILE i<n DO

	SET @DN = (SELECT DISTINCT `CDONETNAME` FROM START_DATE_MASTER_LSCNT_RK  WHERE CNT = 2 LIMIT i,1);
    
    SET @D_DATE = (SELECT IF(`JUDGE_DATE`>`LAST_SEEN_2`,`JUDGE_DATE`,`LAST_SEEN_2`) FROM START_DATE_MASTER_LSCNT_RK WHERE CDONETNAME = @DN AND `LAST_SEEN_RANK` = 1);
    
    SET @RP_DATE1 = (SELECT MIN(`REPORTDATE`) FROM MONTHLY_DEAL_DATA WHERE `CDONETNAME` = @DN 
AND `REPORTDATE` > DATE_ADD(@D_DATE,INTERVAL @REFI_RESET_DATE_BARRIER DAY)
AND `REDATE` IS NOT NULL);

    SET @RP_DATE2 = (SELECT MAX(`REPORTDATE`) FROM MONTHLY_DEAL_DATA WHERE `CDONETNAME` = @DN 
AND `REPORTDATE` < DATE_ADD(@D_DATE,INTERVAL -@REFI_RESET_DATE_BARRIER-60 DAY)
AND `REDATE` IS NOT NULL);

    SET @HAS_NON_R = (SELECT COUNT(LABEL)>0 FROM TRANCHES WHERE `CDONETNAME` = @DN AND 
`REPORTDATE` = @RP_DATE1 AND SUBORDPRIORITY > 0 AND ISNULLIFIED = 0 AND ISCOMBINATION = 0 AND SUBORD <> 'EQUITY' AND `LABEL` NOT LIKE '%R' AND `LABEL` NOT LIKE '%X%');

	SET @RED1 = (SELECT `REDATE` FROM MONTHLY_DEAL_DATA WHERE `CDONETNAME` = @DN AND `REPORTDATE` = @RP_DATE1);
    
    SET @RED2 = (SELECT `REDATE` FROM MONTHLY_DEAL_DATA WHERE `CDONETNAME` = @DN AND `REPORTDATE` = @RP_DATE2);
    
	SET @SAME_WTF = 	(SELECT COUNT(*) = 0 FROM
    (SELECT (T1F = T2F) AS THE_SAME FROM 
    (SELECT `SUBORDPRIORITY`,SUM(`ORIGFACE`) AS T1F FROM TRANCHES WHERE `CDONETNAME` = @DN AND 
`REPORTDATE` = @RP_DATE1 AND SUBORDPRIORITY > 0 AND ISNULLIFIED = 0 AND ISCOMBINATION = 0 GROUP BY `SUBORDPRIORITY`) AS T1
LEFT JOIN
	(SELECT `SUBORDPRIORITY`,SUM(`ORIGFACE`) AS T2F FROM TRANCHES WHERE `CDONETNAME` = @DN AND 
`REPORTDATE` = @RP_DATE2 AND SUBORDPRIORITY > 0 AND ISNULLIFIED = 0 AND ISCOMBINATION = 0 GROUP BY `SUBORDPRIORITY`) AS T2
ON T1.`SUBORDPRIORITY` = T2.`SUBORDPRIORITY`) AS T_COMPARE WHERE THE_SAME <> 1);

	SET @HAS_NULL = (@RP_DATE1 IS NULL) OR (@RP_DATE2 IS NULL) OR (@RED1 IS NULL) OR (@RED2 IS NULL) OR (@SAME_WTF IS NULL);

	UPDATE START_DATE_MASTER_LSCNT_RK SET `REMARK` = IF(@HAS_NULL,NULL,
    (@RED1 = @RED2) AND (@SAME_WTF AND @RP_DATE1 IS NOT NULL AND @RP_DATE2 IS NOT NULL)) WHERE `CDONETNAME` = @DN;
    
    SET i = i + 1;
    
END WHILE;
END;
;;
DELIMITER ;
CALL LOOP2_REFI_RST();

# UPDATE START DATE - COUNT = 2, FIRST LEG
UPDATE START_DATE_MASTER_LSCNT_RK LEFT JOIN (SELECT * FROM NCEDATE_BY_CDONETNAME_CNT_RK WHERE `NCED_RANK` = 1) AS T
ON START_DATE_MASTER_LSCNT_RK.`CDONETNAME` = T.`CDONETNAME`
SET START_DATE_MASTER_LSCNT_RK.`STARTDATE` = DATE_ADD(T.`NCEDATE`,INTERVAL -@NCEDATE_ADJ DAY)
WHERE START_DATE_MASTER_LSCNT_RK.CNT = 2 AND START_DATE_MASTER_LSCNT_RK.LAST_SEEN_RANK = 1;

# UPDATE START DATE - COUNT = 2, SECOND LEG, RESET
UPDATE START_DATE_MASTER_LSCNT_RK LEFT JOIN (SELECT * FROM NCEDATE_BY_CDONETNAME_CNT_RK WHERE `NCED_RANK` = 2 ) AS T
ON START_DATE_MASTER_LSCNT_RK.`CDONETNAME` = T.`CDONETNAME`
SET START_DATE_MASTER_LSCNT_RK.`STARTDATE` = DATE_ADD(T.`NCEDATE`,INTERVAL -@NCEDATE_ADJ DAY)
WHERE START_DATE_MASTER_LSCNT_RK.CNT = 2 AND START_DATE_MASTER_LSCNT_RK.LAST_SEEN_RANK = 2 AND REMARK = 0;

# UPDATE START DATE - COUNT = 2, SECOND LEG, REFI
CREATE TEMPORARY TABLE  IF NOT EXISTS TEMP1 AS (SELECT `CDONETNAME`,`LAST_SEEN_2` FROM START_DATE_MASTER_LSCNT_RK WHERE `LAST_SEEN_RANK` = 1 AND CNT = 2 );
UPDATE START_DATE_MASTER_LSCNT_RK LEFT JOIN TEMP1
ON START_DATE_MASTER_LSCNT_RK.`CDONETNAME` = TEMP1.`CDONETNAME`
SET START_DATE_MASTER_LSCNT_RK.`STARTDATE` = TEMP1.`LAST_SEEN_2`
WHERE START_DATE_MASTER_LSCNT_RK.`CNT` = 2 AND START_DATE_MASTER_LSCNT_RK.`LAST_SEEN_RANK` = 2 AND `REMARK` = 1;

# UPDATE START DATE - COUNT = 3, FIRST LEG
UPDATE START_DATE_MASTER_LSCNT_RK LEFT JOIN (SELECT * FROM NCEDATE_BY_CDONETNAME_CNT_RK WHERE `NCED_RANK` = 1) AS T
ON START_DATE_MASTER_LSCNT_RK.`CDONETNAME` = T.`CDONETNAME`
SET START_DATE_MASTER_LSCNT_RK.`STARTDATE` = DATE_ADD(T.`NCEDATE`,INTERVAL -@NCEDATE_ADJ DAY)
WHERE START_DATE_MASTER_LSCNT_RK.CNT = 3 AND START_DATE_MASTER_LSCNT_RK.LAST_SEEN_RANK = 1;

# CHECK COUNT = 3, SECOND LEG, RESET OR REFI
DROP PROCEDURE IF EXISTS LOOP3_REFI_RST;
DELIMITER ;;
CREATE PROCEDURE LOOP3_REFI_RST()
BEGIN
DECLARE n INT DEFAULT 0;
DECLARE i INT DEFAULT 0;
SELECT COUNT(DISTINCT `CDONETNAME`) FROM START_DATE_MASTER_LSCNT_RK WHERE CNT = 3 INTO n;
SET i = 0;
WHILE i<n DO
	
	SET @DN = (SELECT DISTINCT `CDONETNAME` FROM START_DATE_MASTER_LSCNT_RK  WHERE CNT = 3 LIMIT i,1);
    
	SET @D_DATE = (SELECT IF(`JUDGE_DATE`>`LAST_SEEN_2`,`JUDGE_DATE`,`LAST_SEEN_2`) FROM START_DATE_MASTER_LSCNT_RK WHERE CDONETNAME = @DN AND `LAST_SEEN_RANK` = 2);
    
    SET @RP_DATE1 = (SELECT MIN(`REPORTDATE`) FROM MONTHLY_DEAL_DATA WHERE `CDONETNAME` = @DN 
AND `REPORTDATE` > DATE_ADD(@D_DATE,INTERVAL @REFI_RESET_DATE_BARRIER DAY)
AND `REDATE` IS NOT NULL);

    SET @RP_DATE2 = (SELECT MAX(`REPORTDATE`) FROM MONTHLY_DEAL_DATA WHERE `CDONETNAME` = @DN 
AND `REPORTDATE` < DATE_ADD(@D_DATE,INTERVAL -@REFI_RESET_DATE_BARRIER-60 DAY)
AND `REDATE` IS NOT NULL);

    SET @HAS_NON_R = (SELECT COUNT(LABEL)>0 FROM TRANCHES WHERE `CDONETNAME` = @DN AND 
`REPORTDATE` = @RP_DATE1 AND SUBORDPRIORITY > 0 AND ISNULLIFIED = 0 AND ISCOMBINATION = 0 AND SUBORD <> 'EQUITY' AND `LABEL` NOT LIKE '%R%' AND `LABEL` NOT LIKE '%X%');

	SET @RED1 = (SELECT `REDATE` FROM MONTHLY_DEAL_DATA WHERE `CDONETNAME` = @DN AND `REPORTDATE` = @RP_DATE1);
    
    SET @RED2 = (SELECT `REDATE` FROM MONTHLY_DEAL_DATA WHERE `CDONETNAME` = @DN AND `REPORTDATE` = @RP_DATE2);
    
	SET @SAME_WTF = 	(SELECT COUNT(*) = 0 FROM
    (SELECT (T1F = T2F) AS THE_SAME FROM 
    (SELECT `SUBORDPRIORITY`,SUM(`ORIGFACE`) AS T1F FROM TRANCHES WHERE `CDONETNAME` = @DN AND 
`REPORTDATE` = @RP_DATE1 AND SUBORDPRIORITY > 0 AND ISNULLIFIED = 0 AND ISCOMBINATION = 0 GROUP BY `SUBORDPRIORITY`) AS T1
LEFT JOIN
	(SELECT `SUBORDPRIORITY`,SUM(`ORIGFACE`) AS T2F FROM TRANCHES WHERE `CDONETNAME` = @DN AND 
`REPORTDATE` = @RP_DATE2 AND SUBORDPRIORITY > 0 AND ISNULLIFIED = 0 AND ISCOMBINATION = 0 GROUP BY `SUBORDPRIORITY`) AS T2
ON T1.`SUBORDPRIORITY` = T2.`SUBORDPRIORITY`) AS T_COMPARE WHERE THE_SAME <> 1);

	SET @HAS_NULL = (@RP_DATE1 IS NULL) OR (@RP_DATE2 IS NULL) OR (@RED1 IS NULL) OR (@RED2 IS NULL) OR (@SAME_WTF IS NULL);

	UPDATE START_DATE_MASTER_LSCNT_RK SET `REMARK` = IF(@HAS_NULL,NULL,
    (@RED1 = @RED2) AND (@SAME_WTF AND @RP_DATE1 IS NOT NULL AND @RP_DATE2 IS NOT NULL)) WHERE `CDONETNAME` = @DN;
    
    SET i = i + 1;
    
END WHILE;
END;
;;
DELIMITER ;
CALL LOOP3_REFI_RST();


# CHECK COUNT = 3, SECOND LEG, RESET OR REFI
DROP PROCEDURE IF EXISTS LOOP3_REFI_RST2;
DELIMITER ;;
CREATE PROCEDURE LOOP3_REFI_RST2()
BEGIN
DECLARE n INT DEFAULT 0;
DECLARE i INT DEFAULT 0;
SELECT COUNT(DISTINCT `CDONETNAME`) FROM START_DATE_MASTER_LSCNT_RK WHERE CNT = 3 INTO n;
SET i = 0;
WHILE i<n DO
	
	SET @DN = (SELECT DISTINCT `CDONETNAME` FROM START_DATE_MASTER_LSCNT_RK  WHERE CNT = 3 LIMIT i,1);
    
	SET @D_DATE = (SELECT IF(`JUDGE_DATE`>`LAST_SEEN_2`,`JUDGE_DATE`,`LAST_SEEN_2`) FROM START_DATE_MASTER_LSCNT_RK WHERE CDONETNAME = @DN AND `LAST_SEEN_RANK` = 1);
    
    SET @RP_DATE1 = (SELECT MIN(`REPORTDATE`) FROM MONTHLY_DEAL_DATA WHERE `CDONETNAME` = @DN 
AND `REPORTDATE` > DATE_ADD(@D_DATE,INTERVAL @REFI_RESET_DATE_BARRIER DAY)
AND `REDATE` IS NOT NULL);

    SET @RP_DATE2 = (SELECT MAX(`REPORTDATE`) FROM MONTHLY_DEAL_DATA WHERE `CDONETNAME` = @DN 
AND `REPORTDATE` < DATE_ADD(@D_DATE,INTERVAL -@REFI_RESET_DATE_BARRIER-60 DAY)
AND `REDATE` IS NOT NULL);

    SET @HAS_NON_R = (SELECT COUNT(LABEL)>0 FROM TRANCHES WHERE `CDONETNAME` = @DN AND 
`REPORTDATE` = @RP_DATE1 AND SUBORDPRIORITY > 0 AND ISNULLIFIED = 0 AND ISCOMBINATION = 0 AND SUBORD <> 'EQUITY' AND `LABEL` NOT LIKE '%R%' AND `LABEL` NOT LIKE '%X%');

	SET @RED1 = (SELECT `REDATE` FROM MONTHLY_DEAL_DATA WHERE `CDONETNAME` = @DN AND `REPORTDATE` = @RP_DATE1);
    
    SET @RED2 = (SELECT `REDATE` FROM MONTHLY_DEAL_DATA WHERE `CDONETNAME` = @DN AND `REPORTDATE` = @RP_DATE2);
    
	SET @SAME_WTF = 	(SELECT COUNT(*) = 0 FROM
    (SELECT (T1F = T2F) AS THE_SAME FROM 
    (SELECT `SUBORDPRIORITY`,SUM(`ORIGFACE`) AS T1F FROM TRANCHES WHERE `CDONETNAME` = @DN AND 
`REPORTDATE` = @RP_DATE1 AND SUBORDPRIORITY > 0 AND ISNULLIFIED = 0 AND ISCOMBINATION = 0 GROUP BY `SUBORDPRIORITY`) AS T1
LEFT JOIN
	(SELECT `SUBORDPRIORITY`,SUM(`ORIGFACE`) AS T2F FROM TRANCHES WHERE `CDONETNAME` = @DN AND 
`REPORTDATE` = @RP_DATE2 AND SUBORDPRIORITY > 0 AND ISNULLIFIED = 0 AND ISCOMBINATION = 0 GROUP BY `SUBORDPRIORITY`) AS T2
ON T1.`SUBORDPRIORITY` = T2.`SUBORDPRIORITY`) AS T_COMPARE WHERE THE_SAME <> 1);

	SET @HAS_NULL = (@RP_DATE1 IS NULL) OR (@RP_DATE2 IS NULL) OR (@RED1 IS NULL) OR (@RED2 IS NULL) OR (@SAME_WTF IS NULL);

	UPDATE START_DATE_MASTER_LSCNT_RK SET `REMARK2` = IF(@HAS_NULL,NULL,
    (@RED1 = @RED2) AND (@SAME_WTF AND @RP_DATE1 IS NOT NULL AND @RP_DATE2 IS NOT NULL)) WHERE `CDONETNAME` = @DN;
    
    SET i = i + 1;
    
END WHILE;
END;
;;
DELIMITER ;
CALL LOOP3_REFI_RST2();


# UPDATE START DATE - COUNT = 3, SECOND LEG, REFI
CREATE TEMPORARY TABLE IF NOT EXISTS TEMP2 AS (SELECT `CDONETNAME`,`LAST_SEEN_2` FROM START_DATE_MASTER_LSCNT_RK WHERE `LAST_SEEN_RANK` = 1 AND CNT = 3 );
UPDATE START_DATE_MASTER_LSCNT_RK LEFT JOIN TEMP2
ON START_DATE_MASTER_LSCNT_RK.`CDONETNAME` = TEMP2.`CDONETNAME`
SET START_DATE_MASTER_LSCNT_RK.`STARTDATE` = TEMP2.`LAST_SEEN_2`
WHERE START_DATE_MASTER_LSCNT_RK.`CNT` = 3 AND START_DATE_MASTER_LSCNT_RK.`LAST_SEEN_RANK` = 2;

# UPDATE START DATE - COUNT = 3, THIRD LEG, RESET
UPDATE START_DATE_MASTER_LSCNT_RK LEFT JOIN (SELECT `CDONETNAME`,MAX(NCEDATE) AS `MAX_NC` FROM NCEDATE_BY_CDONETNAME_CNT_RK GROUP BY `CDONETNAME` ) AS T
ON START_DATE_MASTER_LSCNT_RK.`CDONETNAME` = T.`CDONETNAME`
SET START_DATE_MASTER_LSCNT_RK.`STARTDATE` = DATE_ADD(T.`MAX_NC`,INTERVAL -@NCEDATE_ADJ DAY)
WHERE START_DATE_MASTER_LSCNT_RK.`CNT` = 3 AND START_DATE_MASTER_LSCNT_RK.LAST_SEEN_RANK = 3 AND `REMARK` = 0;

# COMBINE START DATE WITH JUDGE DATE TABLE
CREATE TEMPORARY TABLE IF NOT EXISTS ALL_SUBJECTS AS
SELECT 
TRANCHE_WITH_NewLastSeen_NewPaidDate.CDONETNAME,
TRANCHE_WITH_NewLastSeen_NewPaidDate.LABEL,
TRANCHE_WITH_NewLastSeen_NewPaidDate.NCEDATE,
TRANCHE_WITH_NewLastSeen_NewPaidDate.LAST_SEEN_2,
TRANCHE_WITH_NewLastSeen_NewPaidDate.JUDGE_DATE,
TRANCHE_WITH_NewLastSeen_NewPaidDate.CALLED,
START_DATE_MASTER_LSCNT_RK.LAST_SEEN_RANK,
START_DATE_MASTER_LSCNT_RK.CNT AS `LAST_SEEN_CNT`,
START_DATE_MASTER_LSCNT_RK.STARTDATE,
START_DATE_MASTER_LSCNT_RK.REMARK FROM 
TRANCHE_WITH_NewLastSeen_NewPaidDate LEFT JOIN
START_DATE_MASTER_LSCNT_RK ON
TRANCHE_WITH_NewLastSeen_NewPaidDate.CDONETNAME = START_DATE_MASTER_LSCNT_RK.CDONETNAME AND
TRANCHE_WITH_NewLastSeen_NewPaidDate.LAST_SEEN_2 = START_DATE_MASTER_LSCNT_RK.LAST_SEEN_2
WHERE TRANCHE_WITH_NewLastSeen_NewPaidDate.JUDGE_DATE IS NOT NULL AND STARTDATE IS NOT NULL;

# COMBINE ALL_SUBJECTS WITH TRANCHE TABLE
CREATE TEMPORARY TABLE IF NOT EXISTS ALL_SUBJECTS_BASICS AS
(SELECT ALL_SUBJECTS.*,
TRANCHES.REPORTDATE,
TRANCHES.`ORTG-MDY`,
TRANCHES.`ORTG-SP`,
TRANCHES.`ORTG-FH`,
TRANCHES.`CRTG-MDY`,
TRANCHES.`CRTG-SP`,
TRANCHES.`CRTG-FH`,
TRANCHES.CURRENCY,
TRANCHES.ORIGFACE,
TRANCHES.CURRFACE,
TRANCHES.COUPONTYPE,
TRANCHES.CPNSPRD,
TRANCHES.CPNRATE,
TRANCHES.SUBORD,
TRANCHES.SUBORDPRIORITY,
TRANCHES.ISNULLIFIED,
TRANCHES.ISCOMBINATION
 FROM ALL_SUBJECTS INNER JOIN TRANCHES ON 
ALL_SUBJECTS.CDONETNAME = TRANCHES.CDONETNAME AND ALL_SUBJECTS.LABEL =  TRANCHES.LABEL
WHERE TRANCHES.REPORTDATE <= ALL_SUBJECTS.JUDGE_DATE
AND TRANCHES.REPORTDATE >= ALL_SUBJECTS.STARTDATE);
ALTER TABLE ALL_SUBJECTS_BASICS ADD PRIMARY KEY (`CDONETNAME`,`LABEL`,`REPORTDATE`);

# MATCH WAS
ALTER TABLE ALL_SUBJECTS_BASICS ADD `WAS` DECIMAL(10,5);
UPDATE
	ALL_SUBJECTS_BASICS
INNER JOIN
	(SELECT `CDONETNAME`,`REPORTDATE`,`VALUE_ACTUAL` FROM CQT WHERE `TESTNAME` = 'WAS') CQT
ON 
	ALL_SUBJECTS_BASICS.`CDONETNAME` = CQT.`CDONETNAME`
AND 
	ALL_SUBJECTS_BASICS.`REPORTDATE` = CQT.`REPORTDATE`
SET
	ALL_SUBJECTS_BASICS.`WAS` = CQT.`VALUE_ACTUAL`;


# MATCH WAL
ALTER TABLE ALL_SUBJECTS_BASICS ADD `WAL` DECIMAL(10,5);
UPDATE
	ALL_SUBJECTS_BASICS
INNER JOIN
	(SELECT `CDONETNAME`,`REPORTDATE`,`TRIGGER` - `VALUE_ACTUAL` as `WAL_CUSH` FROM CQT WHERE `TESTNAME` = 'WAL') CQT
ON 
	ALL_SUBJECTS_BASICS.`CDONETNAME` = CQT.`CDONETNAME`
AND 
	ALL_SUBJECTS_BASICS.`REPORTDATE` = CQT.`REPORTDATE`
SET
	ALL_SUBJECTS_BASICS.`WAL` = CQT.`WAL_CUSH`;


/*

# CREATE WAS TABLE
CREATE TEMPORARY TABLE IF NOT EXISTS WAS_TABLE AS
SELECT DISTINCT YEAR(ALL_SUBJECTS_BASICS.`REPORTDATE`) YR,MONTH(ALL_SUBJECTS_BASICS.`REPORTDATE`) MTH,`CDONETNAME` FROM ALL_SUBJECTS_BASICS;
ALTER TABLE WAS_TABLE ADD `WAS` DECIMAL(10,5);
UPDATE WAS_TABLE LEFT JOIN WAS_TMP ON
WAS_TABLE.`CDONETNAME` = WAS_TMP.`CDONETNAME` AND
`YR` = YEAR(WAS_TMP.`DATE`) AND `MTH` = MONTH(WAS_TMP.`DATE`)
SET WAS_TABLE.`WAS` = WAS_TMP.`WAS`;
ALTER TABLE WAS_TABLE ADD PRIMARY KEY (`YR`,`MTH`,`CDONETNAME`);

UPDATE ALL_SUBJECTS_BASICS LEFT JOIN 
WAS_TABLE ON
ALL_SUBJECTS_BASICS.`CDONETNAME` = WAS_TABLE.`CDONETNAME` AND
YEAR(ALL_SUBJECTS_BASICS.`REPORTDATE`) = `YR` AND
MONTH(ALL_SUBJECTS_BASICS.`REPORTDATE`) = `MTH`
SET ALL_SUBJECTS_BASICS.`WAS` = WAS_TABLE.`WAS`;

# CALCULATE MISSING WAS AND INSERT
INSERT INTO WAS_TMP
SELECT `REPORTDATE`,`clos_CDONETNAME`,SUM(`CPNSPRD` * `FACE`)/SUM(`FACE`) FROM CLO_LOANS 
WHERE (`clos_CDONETNAME`,`REPORTDATE`) IN 
(SELECT DISTINCT `CDONETNAME`,`reportdate` FROM ALL_SUBJECTS_BASICS WHERE WAS IS NULL) AND `LOANX ID` <> ''
GROUP BY `clos_CDONETNAME`,`reportdate`;

# OBTAIN THE MISSING WAS FROM WAS TABLE
UPDATE ALL_SUBJECTS_BASICS LEFT JOIN 
WAS_TMP ON
ALL_SUBJECTS_BASICS.`CDONETNAME` = WAS_TMP.`CDONETNAME` AND
ALL_SUBJECTS_BASICS.`REPORTDATE` = WAS_TMP.`DATE`
SET ALL_SUBJECTS_BASICS.`WAS` = WAS_TMP.`WAS` WHERE ALL_SUBJECTS_BASICS.`WAS` IS NULL;
*/


# ADD MODIFIED RATING
ALTER TABLE ALL_SUBJECTS_BASICS ADD `C_RATING` VARCHAR(20);
UPDATE ALL_SUBJECTS_BASICS  SET `C_RATING` =  
(SELECT IF(`ORTG-MDY` <> 'N/R',`ORTG-MDY`,IF(`ORTG-SP` <> 'N/R',`ORTG-SP`,IF(`ORTG-FH` <> 'N/R',`ORTG-FH`,
IF(`CRTG-MDY` <> 'N/R',`CRTG-MDY`,IF(`CRTG-SP` <> 'N/R',`CRTG-SP`,`CRTG-FH`))))));
ALTER TABLE ALL_SUBJECTS_BASICS ADD `M_RATING` VARCHAR(20);
UPDATE ALL_SUBJECTS_BASICS  SET `M_RATING` =  
CONCAT((SELECT LENGTH(`C_RATING`)+(`C_RATING` REGEXP '([abc])$')-1),(SELECT LEFT(`C_RATING`,1)));
UPDATE ALL_SUBJECTS_BASICS SET `M_RATING` = (SELECT REPEAT(SUBSTRING(`M_RATING`,2,1),SUBSTRING(`M_RATING`,1,1)));

# ATTACH AAA TRANCHE CPN
CREATE TEMPORARY TABLE IF NOT EXISTS ALL_SUBJECTS_BASICS_DOLLY AS
SELECT `CDONETNAME`,`STARTDATE`,MIN(`CPNSPRD`) AS `CPNSPRD` FROM ALL_SUBJECTS_BASICS WHERE `M_RATING` = 'AAA' AND `CPNSPRD` > 0 GROUP BY `CDONETNAME`,`STARTDATE`;
ALTER TABLE ALL_SUBJECTS_BASICS_DOLLY ADD PRIMARY KEY (`CDONETNAME`,`STARTDATE`);

ALTER TABLE ALL_SUBJECTS_BASICS ADD `AAA_SPRD` DOUBLE;
UPDATE ALL_SUBJECTS_BASICS INNER JOIN 
(SELECT * FROM ALL_SUBJECTS_BASICS_DOLLY) TRNHS
ON
ALL_SUBJECTS_BASICS.CDONETNAME = TRNHS.CDONETNAME AND ALL_SUBJECTS_BASICS.STARTDATE = TRNHS.STARTDATE
SET ALL_SUBJECTS_BASICS.`AAA_SPRD` = TRNHS.`CPNSPRD`;

# FIX ENDING PERIOD START TIME
CREATE TEMPORARY TABLE IF NOT EXISTS TMP_MAX_REPORT AS
SELECT `CDONETNAME`,`LABEL`, MAX(`REPORTDATE`) AS MAX_REPORTDATE FROM ALL_SUBJECTS_BASICS
GROUP BY `CDONETNAME`,`LABEL`;

CREATE TEMPORARY TABLE IF NOT EXISTS ALL_SUBJECTS_BASICS_ADDITIONAL AS    
SELECT ALL_SUBJECTS_BASICS.* FROM ALL_SUBJECTS_BASICS INNER JOIN TMP_MAX_REPORT
ON ALL_SUBJECTS_BASICS.`CDONETNAME` = TMP_MAX_REPORT.`CDONETNAME`
AND ALL_SUBJECTS_BASICS.`LABEL` = TMP_MAX_REPORT.`LABEL`
AND ALL_SUBJECTS_BASICS.`REPORTDATE` = TMP_MAX_REPORT.`MAX_REPORTDATE`;
UPDATE ALL_SUBJECTS_BASICS_ADDITIONAL SET `REPORTDATE` = `JUDGE_DATE`;

INSERT IGNORE INTO ALL_SUBJECTS_BASICS() SELECT * FROM ALL_SUBJECTS_BASICS_ADDITIONAL;


######## ATTACH EQUITY NAV TO THE BASIC TABLE #######
ALTER TABLE ALL_SUBJECTS_BASICS 
ADD NAV_DATE1 DATE,
ADD NAV1 DOUBLE,
ADD NAV_DATE2 DATE,
ADD NAV2 DOUBLE,
ADD NAV_DATE3 DATE,
ADD NAV3 DOUBLE;

UPDATE ALL_SUBJECTS_BASICS SET `NAV_DATE1` = 
(DATE_ADD(`REPORTDATE`,INTERVAL (IF(DAYOFWEEK(`REPORTDATE`)=7,-1,IF(DAYOFWEEK(`REPORTDATE`)=0,-2,0))) DAY));
UPDATE ALL_SUBJECTS_BASICS SET `NAV_DATE2` = (DATE_ADD(`NAV_DATE1`,INTERVAL -@NAV_DAYDIFF1 DAY)),
`NAV_DATE3` = (DATE_ADD(`NAV_DATE1`,INTERVAL -@NAV_DAYDIFF2 DAY));

UPDATE ALL_SUBJECTS_BASICS LEFT JOIN WAP_NAV2 ON
ALL_SUBJECTS_BASICS.CDONETNAME = WAP_NAV2.CDONETNAME AND ALL_SUBJECTS_BASICS.`NAV_DATE1` = WAP_NAV2.`DATE`
SET `NAV1` = `NAV` WHERE `NAV` IS NOT NULL;

UPDATE ALL_SUBJECTS_BASICS LEFT JOIN WAP_NAV2 ON
ALL_SUBJECTS_BASICS.CDONETNAME = WAP_NAV2.CDONETNAME AND ALL_SUBJECTS_BASICS.`NAV_DATE2` = WAP_NAV2.`DATE`
SET `NAV2` = `NAV` WHERE `NAV` IS NOT NULL;

UPDATE ALL_SUBJECTS_BASICS LEFT JOIN WAP_NAV2 ON
ALL_SUBJECTS_BASICS.CDONETNAME = WAP_NAV2.CDONETNAME AND ALL_SUBJECTS_BASICS.`NAV_DATE3` = WAP_NAV2.`DATE`
SET `NAV3` = `NAV` WHERE `NAV` IS NOT NULL;

# ADD JPMorgan AAA CLOIE Values
ALTER TABLE ALL_SUBJECTS_BASICS 
ADD `AAA_Date1` DATE,
ADD `AAA_DM1` DOUBLE,
ADD `AAA_Date2` DATE,
ADD `AAA_DM2` DOUBLE;

UPDATE ALL_SUBJECTS_BASICS SET `AAA_Date1` = `NAV_DATE1`;
UPDATE ALL_SUBJECTS_BASICS SET `AAA_Date2` = (DATE_ADD(`AAA_Date1`,INTERVAL -@AAA_DAYDIFF1 DAY));

UPDATE ALL_SUBJECTS_BASICS LEFT JOIN 
(SELECT `DATE`,`VALUE` FROM CLOIE WHERE `TICKER` = (SELECT `TICKER` FROM CLOIE_TYPE WHERE `VINTAGE` = 2 AND `RATING` = 'AAA' AND `VALUETYPE` = 'DM')) AS CLOIDX ON
ALL_SUBJECTS_BASICS.`AAA_Date1` = CLOIDX.`DATE`
SET `AAA_DM1` = CLOIDX.`VALUE` WHERE CLOIDX.`VALUE` IS NOT NULL;

UPDATE ALL_SUBJECTS_BASICS LEFT JOIN 
(SELECT `DATE`,`VALUE` FROM CLOIE WHERE `TICKER` = (SELECT `TICKER` FROM CLOIE_TYPE WHERE `VINTAGE` = 2 AND `RATING` = 'AAA' AND `VALUETYPE` = 'DM')) AS CLOIDX ON
ALL_SUBJECTS_BASICS.`AAA_Date2` = CLOIDX.`DATE`
SET `AAA_DM2` = CLOIDX.`VALUE` WHERE CLOIDX.`VALUE` IS NOT NULL;

# ADD JPMorgan Corresponding Tranche CLOIE values
ALTER TABLE ALL_SUBJECTS_BASICS 
ADD `RATING_Date1` DATE,
ADD `RATING_DM1` DOUBLE,
ADD `RATING_Date2` DATE,
ADD `RATING_DM2` DOUBLE;
UPDATE ALL_SUBJECTS_BASICS SET `RATING_Date1` = `AAA_Date1`;
UPDATE ALL_SUBJECTS_BASICS SET `RATING_Date2` = `AAA_Date2`;

UPDATE ALL_SUBJECTS_BASICS
ALL_SUBJECTS_BASICS 
INNER JOIN 
(SELECT * FROM CLOIE_TYPE WHERE `VINTAGE` = 2 AND `VALUETYPE` = 'DM') AS CTYPE 
	ON ALL_SUBJECTS_BASICS.`M_RATING` = CTYPE.`RATING`
INNER JOIN
CLOIE
	ON ALL_SUBJECTS_BASICS.`RATING_Date1` = CLOIE.`DATE` AND CTYPE.`TICKER` = CLOIE.`TICKER`
SET `RATING_DM1` = CLOIE.`VALUE`;

UPDATE ALL_SUBJECTS_BASICS
ALL_SUBJECTS_BASICS 
INNER JOIN 
(SELECT * FROM CLOIE_TYPE WHERE `VINTAGE` = 2 AND `VALUETYPE` = 'DM') AS CTYPE 
	ON ALL_SUBJECTS_BASICS.`M_RATING` = CTYPE.`RATING`
INNER JOIN
CLOIE
	ON ALL_SUBJECTS_BASICS.`RATING_Date2` = CLOIE.`DATE` AND CTYPE.`TICKER` = CLOIE.`TICKER`
SET `RATING_DM2` = CLOIE.`VALUE`;

# Get SURV Start time
CREATE TEMPORARY TABLE IF NOT EXISTS CDONETNAME_STARTTIME AS
(SELECT DISTINCT `CDONETNAME`,`STARTDATE`,`REPORTDATE` FROM ALL_SUBJECTS_BASICS);

CREATE TEMPORARY TABLE IF NOT EXISTS CDONETNAME_STARTTIME_DONE AS
SELECT `CDONETNAME`,`STARTDATE`,`REPORTDATE`,`START_TIME` FROM (
SELECT *,
@STUDENT:=CASE WHEN @CLASS <> `CDONETNAME` OR @CLASS2 <> `STARTDATE` THEN 
CONCAT(Left(@CLASS:= `CDONETNAME`, 0),LEFT(@CLASS2:= `STARTDATE`,0),LEFT(@RPDATE:=`REPORTDATE`,0),`STARTDATE`) 
ELSE CONCAT(@RPDATE,LEFT(@RPDATE:=`REPORTDATE`,0)) END AS `START_TIME`
FROM
(SELECT @CLASS:= 0) AS f,
(SELECT @CLASS2:= 0) AS u,
(SELECT @RPDATE:= 0) AS p,
(SELECT * FROM CDONETNAME_STARTTIME ORDER BY `CDONETNAME`,`STARTDATE`,`REPORTDATE`) AS T) AS T2;
ALTER TABLE CDONETNAME_STARTTIME_DONE ADD PRIMARY KEY (`CDONETNAME`,`STARTDATE`,`REPORTDATE`);

# APPEND NORMAL START TIME
ALTER TABLE ALL_SUBJECTS_BASICS ADD START_TIME DATE;
UPDATE ALL_SUBJECTS_BASICS LEFT JOIN CDONETNAME_STARTTIME_DONE ON
ALL_SUBJECTS_BASICS.`CDONETNAME` = CDONETNAME_STARTTIME_DONE.`CDONETNAME` AND
ALL_SUBJECTS_BASICS.`STARTDATE` = CDONETNAME_STARTTIME_DONE.`STARTDATE` AND
ALL_SUBJECTS_BASICS.`REPORTDATE` = CDONETNAME_STARTTIME_DONE.`REPORTDATE` 
SET ALL_SUBJECTS_BASICS.`START_TIME` = CDONETNAME_STARTTIME_DONE.`START_TIME`;

# Transform into SURV data
CREATE TEMPORARY TABLE IF NOT EXISTS DATA_OUTPUT AS (
SELECT 
`CDONETNAME`,`LABEL`,`NCEDATE`,`LAST_SEEN_2`,`JUDGE_DATE`,`CALLED`,`LAST_SEEN_RANK`,`LAST_SEEN_CNT`,`STARTDATE`,
`REMARK`,`REPORTDATE`,`COUPONTYPE`,`WAS`,`WAL`,`CPNSPRD`,`CPNRATE`,`SUBORD`,`SUBORDPRIORITY`,`ISNULLIFIED`,`ISCOMBINATION`,
`NAV_DATE1`,`NAV1`,`NAV_DATE2`,`NAV2`,`NAV_DATE3`,`NAV3`,`AAA_Date1`,`AAA_DM1`,`AAA_Date2`,`AAA_DM2`,`C_RATING`,
`M_RATING`,`AAA_SPRD`,`RATING_Date1`,`RATING_DM1`,`RATING_Date2`,`RATING_DM2`,`START_TIME`
FROM
ALL_SUBJECTS_BASICS WHERE
DATEDIFF(`REPORTDATE`,`START_TIME`) > 1 AND
YEAR(`STARTDATE`) > 2000 AND
`COUPONTYPE` = 'FLOAT' AND
`NAV1` IS NOT NULL AND `NAV2` IS NOT NULL AND `NAV3` IS NOT NULL AND 
`M_RATING` NOT LIKE '%N' AND `M_RATING` NOT LIKE '%W' AND
`WAS` IS NOT NULL);

SET @FILENAME = (SELECT concat('C:/ProgramData/MySQL/MySQL Server 5.7/Uploads/Data_v',DATE_FORMAT(NOW(),"%Y%m%d%k%i%s"),'.csv'));
SET @SQL_TEXT = CONCAT("SELECT 
'CDONETNAME','LABEL','NCEDATE','LAST_SEEN_2','JUDGE_DATE','CALLED','LAST_SEEN_RANK','LAST_SEEN_CNT','STARTDATE',
'REMARK','REPORTDATE','COUPONTYPE','WAS','WAL','CPNSPRD','CPNRATE','SUBORD','SUBORDPRIORITY','ISNULLIFIED','ISCOMBINATION',
'NAV_DATE1','NAV1','NAV_DATE2','NAV2','NAV_DATE3','NAV3','AAA_Date1','AAA_DM1','AAA_Date2','AAA_DM2','C_RATING',
'M_RATING','AAA_SPRD','RATING_Date1','RATING_DM1','RATING_Date2','RATING_DM2','START_TIME'
UNION ALL SELECT * FROM DATA_OUTPUT INTO OUTFILE '", @FILENAME, "' FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n';");
PREPARE S1 FROM @SQL_TEXT;
EXECUTE S1;
DROP PREPARE S1;


#           .--H--.|             PDC |
#         _//_||  ||                 |
#        [    -|  |'--;--------------'
#        '-()-()----()"()^^^^^^^()"()'
############################################
#		Debug queries
############################################
SELECT * FROM DATA_OUTPUT WHERE CDONETNAME = 'MIDOCN1';
SELECT `CDONETNAME`, `LABEL`,`JUDGE_DATE`,`STARTDATE`,`REPORTDATE`,`START_TIME`,`NAV1` FROM DATA_OUTPUT ORDER BY `CDONETNAME`,`LABEL`,`STARTDATE`,`REPORTDATE`;
SELECT distinct `CDONETNAME` FROM ALL_SUBJECTS_BASICS_NAV WHERE `NAV` IS NULL;
SELECT * FROM ER.cdonetname_reportdate_nav WHERE `NAV` IS NULL OR `NAV_MINUS1` IS NULL;

SELECT DISTINCT CDONETNAME FROM ALL_SUBJECTS_BASICS;

SELECT * FROM START_DATE_MASTER_LSCNT_RK WHERE `CNT` = 3 AND `LAST_SEEN_RANK` = 3 AND `LAST_SEEN_2` > `STARTDATE`;
SELECT * FROM START_DATE_MASTER_LSCNT_RK WHERE `CNT` = 2 AND `LAST_SEEN_RANK` = 2;

SELECT * FROM START_DATE_MASTER_LSCNT_RK LEFT JOIN pdc_holdings 
ON START_DATE_MASTER_LSCNT_RK.CDONETNAME = pdc_holdings.CDONETNAME
WHERE FUND IN ('3','5','6','7') GROUP BY START_DATE_MASTER_LSCNT_RK.CDONETNAME ;

SELECT * FROM START_DATE_MASTER_LSCNT_RK LEFT JOIN pdc_holdings 
ON START_DATE_MASTER_LSCNT_RK.CDONETNAME = pdc_holdings.CDONETNAME
WHERE FUND IN ('3','5','6','7') AND CNT > 1 AND REMARK IS NULL GROUP BY START_DATE_MASTER_LSCNT_RK.CDONETNAME ;

ALTER TABLE ER.cdonetname_reportdate_nav ADD `REPORTDATE_MINUS1` DATE;

UPDATE ER.cdonetname_reportdate_nav LEFT JOIN WAP_NAV 
ON ER.cdonetname_reportdate_nav.`CDONETNAME` = WAP_NAV.`CDONETNAME` AND
ER.cdonetname_reportdate_nav.`REPORTDATE_MINUS1` = WAP_NAV.`DATE`
SET `NAV_MINUS1` = WAP_NAV.`NAV` WHERE WAP_NAV.`NAV` <> 0 AND WAP_NAV.`NAV` IS NOT NULL;

SELECT * FROM ER.cdonetname_reportdate_nav;

SELECT * FROM START_DATE_MASTER_LSCNT_RK WHERE JUDGE_DATE IS NOT NULL AND STARTDATE IS NOT NULL;

SELECT * FROM TRANCHE_WITH_NewLastSeen_NewPaidDate;

SELECT * FROM monthly_deal_data WHERE CDONETNAME = @DN;

SET @DN = 'APIDOS15';

    
	SET @D_DATE = (SELECT IF(`JUDGE_DATE`>`LAST_SEEN_2`,`JUDGE_DATE`,`LAST_SEEN_2`) FROM START_DATE_MASTER_LSCNT_RK WHERE CDONETNAME = @DN AND `LAST_SEEN_RANK` = 1);
    
    SET @RP_DATE1 = (SELECT MIN(`REPORTDATE`) FROM MONTHLY_DEAL_DATA WHERE `CDONETNAME` = @DN 
AND `REPORTDATE` > DATE_ADD(@D_DATE,INTERVAL @REFI_RESET_DATE_BARRIER DAY)
AND `REDATE` IS NOT NULL);

    SET @RP_DATE2 = (SELECT MAX(`REPORTDATE`) FROM MONTHLY_DEAL_DATA WHERE `CDONETNAME` = @DN 
AND `REPORTDATE` < DATE_ADD(@D_DATE,INTERVAL -@REFI_RESET_DATE_BARRIER-60 DAY)
AND `REDATE` IS NOT NULL);

    SET @HAS_NON_R = (SELECT COUNT(LABEL)>0 FROM TRANCHES WHERE `CDONETNAME` = @DN AND 
`REPORTDATE` = @RP_DATE1 AND SUBORDPRIORITY > 0 AND ISNULLIFIED = 0 AND ISCOMBINATION = 0 AND SUBORD <> 'EQUITY' AND `LABEL` NOT LIKE '%R%' AND `LABEL` NOT LIKE '%X%');

	SET @RED1 = (SELECT `REDATE` FROM MONTHLY_DEAL_DATA WHERE `CDONETNAME` = @DN AND `REPORTDATE` = @RP_DATE1);
    
    SET @RED2 = (SELECT `REDATE` FROM MONTHLY_DEAL_DATA WHERE `CDONETNAME` = @DN AND `REPORTDATE` = @RP_DATE2);
    
	SET @SAME_WTF = 	(SELECT COUNT(*) = 0 FROM
    (SELECT (T1F = T2F) AS THE_SAME FROM 
    (SELECT `SUBORDPRIORITY`,SUM(`ORIGFACE`) AS T1F FROM TRANCHES WHERE `CDONETNAME` = @DN AND 
`REPORTDATE` = @RP_DATE1 AND SUBORDPRIORITY > 0 AND ISNULLIFIED = 0 AND ISCOMBINATION = 0 GROUP BY `SUBORDPRIORITY`) AS T1
LEFT JOIN
	(SELECT `SUBORDPRIORITY`,SUM(`ORIGFACE`) AS T2F FROM TRANCHES WHERE `CDONETNAME` = @DN AND 
`REPORTDATE` = @RP_DATE2 AND SUBORDPRIORITY > 0 AND ISNULLIFIED = 0 AND ISCOMBINATION = 0 GROUP BY `SUBORDPRIORITY`) AS T2
ON T1.`SUBORDPRIORITY` = T2.`SUBORDPRIORITY`) AS T_COMPARE WHERE THE_SAME <> 1);

	SET @HAS_NULL = (@RP_DATE1 IS NULL) OR (@RP_DATE2 IS NULL) OR (@RED1 IS NULL) OR (@RED2 IS NULL) OR (@SAME_WTF IS NULL);

SELECT @RP_DATE1,@RP_DATE2,@D_DATE,@RED1,@RED2;

SELECT `SUBORDPRIORITY`,SUM(`ORIGFACE`) AS T1F FROM TRANCHES WHERE `CDONETNAME` = @DN AND 
`REPORTDATE` = @RP_DATE1 AND SUBORDPRIORITY > 0 AND ISNULLIFIED = 0 AND ISCOMBINATION = 0 GROUP BY `SUBORDPRIORITY`;

SELECT `SUBORDPRIORITY`,SUM(`ORIGFACE`) AS T1F FROM TRANCHES WHERE `CDONETNAME` = @DN AND 
`REPORTDATE` = @RP_DATE2 AND SUBORDPRIORITY > 0 AND ISNULLIFIED = 0 AND ISCOMBINATION = 0 GROUP BY `SUBORDPRIORITY`;

SELECT @SAME_WTF;

SELECT * FROM monthly_deal_data WHERE CDONETNAME = 'NEUBERGE';

SELECT * FROM NCEDATE_BY_CDONETNAME_CNT_RK WHERE CDONETNAME = 'REGATTA2';

SELECT * FROM START_DATE_MASTER_LSCNT_RK WHERE CDONETNAME = 'ARES_27';

SELECT * FROM TRANCHES WHERE CDONETNAME=  @DN ORDER BY `LABEL`;

SELECT IF(@HAS_NULL,NULL,
    (@RED1 = @RED2) AND (@SAME_WTF AND @RP_DATE1 IS NOT NULL AND @RP_DATE2 IS NOT NULL));
    
    ## this is test